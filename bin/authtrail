#!/usr/bin/env ruby

# frozen_string_literal: true

require 'dry/cli'

require_relative '../config/mongoid'
require_relative '../app/models/audit_event'
require_relative '../app/producers/sample_data_producer'

module Authtrail
  class Cli
    extend Dry::CLI::Registry

    class Serve < Dry::CLI::Command
      desc 'start dev server'
      def call(**)
        system 'ruby app/server.rb'
      end
    end

    class EmitSamples < Dry::CLI::Command
      desc 'emits sample audit events via kafka'

      argument :count, desc: 'number of events to emit 1000 by default'

      def call(count: 1000, **)
        SampleDataProducer.produce_messages(count: count.to_i)
      end
    end

    class Specs < Dry::CLI::Command
      desc "run tests"
      def call(**)
        system 'bundle exec rspec'
      end
    end

    class Poke < Dry::CLI::Command
      desc 'does a dry test for the app and dependencies'

      def call(*)
        puts 'testing the mongo connection'
        puts "there are in total #{AuditEvent.count} records in the database for the audit events"
      end
    end

    class Consume < Dry::CLI::Command
      desc 'consume events from kafka topic'

      def call(**)
        system 'bundle exec karafka server'
      end
    end

    register 'emit-sample', EmitSamples, aliases: ['emit']
    register 'serve', Serve
    register 'specs', Specs
    register 'poke', Poke
    register 'consume', Consume
  end
end


Dry::CLI.new(Authtrail::Cli).call
